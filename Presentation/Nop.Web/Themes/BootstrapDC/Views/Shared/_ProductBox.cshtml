@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="text-center" data-productid="@Model.Id">

    <style type="text/css">
        .promotion {
            line-height: 18px;
            position: relative;
            z-index: 10;            
            left: 0;
            height: 24px;
            width: auto;
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            -o-border-radius: 4px;
            -ms-border-radius: 4px;
            border-radius: 4px;
            left: 0px;
            // Modify left value to adjust discount tag according to your e-commerce design top: 5px;
            //Modify Top value to adjust discount tag according to your e-commerce design;
        }

        .discount {
            background: #eb4800;
            height: 100%;
            display: inline-block;
            padding: 3px 5px;
            color: #fff;
            float: left;
            font-size: 15px;
            font-weight: 300;
            border-radius: 0 4px 4px 0;
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);
        }
    </style>

    @{

        if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice) && !string.IsNullOrEmpty(Model.ProductPrice.Price))
        {
            var OldPrice = double.Parse(Model.ProductPrice.OldPrice.Split(' ')[0]);//Replace Rs. with configured Currency symbol i.e "$"
            var PriceRow = double.Parse(Model.ProductPrice.Price.Split(' ')[0]);//Replace Rs. with configured Currency symbol i.e "$"

            if (PriceRow > 0 && OldPrice > 0)
            {
                var discountValue = OldPrice - PriceRow; // calculate the amount
                var discountPercentage = Math.Round(100 / (OldPrice / discountValue)); // calculate the percentage
                if (discountPercentage > 0)
                {
                    <div class="promotion"> <span class="discount">@discountPercentage% indirim</span> </div>
                }
            }
        }
    }

    <div class="thumbnail">


        

        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" class="img-responsive img-rounded" />
        </a>
        <div class="caption">
            <div class="fixed-title">
                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
            </div>
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                int ratingPercent = 0;
                int fStar = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                fStar = ratingPercent / 20;
                <div class="tooltipOn" data-toggle="tooltip" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    @for (int i = 0; i < fStar; i++)
                    {
                        <i class="fa fa-star fa-lg colorStar"></i>
                    }
                    @for (int i = 0; i < (5 - fStar); i++)
                    {
                        <i class="fa fa-star-o fa-lg"></i>
                    }
                </div>
            }
            <div class="description">
                @Html.Raw(Model.ShortDescription)
            </div>
            @Html.Widget("productbox_addinfo_middle", Model.Id)
            <div class="add-info marginTop10">
                @Html.Widget("productbox_addinfo_before", Model.Id)
                <h4>
                    @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <del class="text-muted"><span>@Model.ProductPrice.OldPrice</span></del>
                        <br />
                    }
                    <strong>@Model.ProductPrice.Price</strong>
                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </span>
                    }
                </h4>
            </div>
            @Html.Widget("productbox_addinfo_after", Model.Id)
            <div class="btn-group" role="group">
                @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <a class="btn btn-primary tips product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</a>
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    @*@T("ShoppingCart.AddToCompareList")*@
                    <a title="@T("ShoppingCart.AddToCompareList")" class="btn btn-default tips add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;"><i class="glyphicon glyphicon-retweet"></i></a>
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    @*@T("ShoppingCart.AddToWishlist")*@
                    <a title="@T("ShoppingCart.AddToWishlist")" class="btn btn-default tips add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;"> <i class="glyphicon glyphicon-heart"></i></a>
                }
            </div>
        </div>
    </div>
</div>
